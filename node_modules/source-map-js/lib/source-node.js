/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walke w y \ A C \ M i c r o s o f t  
 M I C R O S ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ A C \ T e m p  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ A C \ T e m p  
 | n o n e |  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ A p p D a t a \ C a c h e S t o r a g e  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ A p p D a t a \ C a c h e S t o r a g e  
 C A C H E S ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ r o a m i n g . l o c k  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ r o a m i n g . l o c k  
 R O A M I N ~ 1 . L O C  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ s e t t i n g s . d a t  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ s e t t i n g s . d a t  
 | n o n e |  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ s e t t i n g s . d a t . L O G 1  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ s e t t i n g s . d a t . L O G 1  
 S E T T I N ~ 1 . L O G  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ s e t t i n g s . d a t . L O G 2  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C l o u d E x p e r i e n c e H o s t _ c w 5 n 1 h 2 t x y e w y \ S e t t i n g s \ s e t t i n g s . d a t . L O G 2  
 S E T T I N ~ 2 . L O G  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ B a c k g r o u n d T r a n s f e r A p i  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ B a c k g r o u n d T r a n s f e r A p i  
 B A C K G R ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ I N e t C a c h e  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ I N e t C a c h e  
 I N E T C A ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ I N e t C o o k i e s  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ I N e t C o o k i e s  
 I N E T C O ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ I N e t H i s t o r y  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ I N e t H i s t o r y  
 I N E T H I ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ M i c r o s o f t  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ M i c r o s o f t  
 M I C R O S ~ 1  
 \ W i n d o w s . o l d \ U s e r s \ u s e r \ A p p D a t a \ L o c a l \ P a c k a g e s \ M i c r o s o f t . W i n d o w s . C o n t e n t D e l i v e r y M a n a g e r _ c w 5 n 1 h 2 t x y e w y \ A C \ T e m p  
 - \ U s e r s \ u s e r \ A p p D a t a \ L o c a l 